manifest {
    nextflowVersion = '!>=22.10.1'
    mainScript = "main.nf"
}

params {
    outdir        = "results_bin_refinement"
    rename_bins   = true
    name          = ""
    checkm_ref_db = ""
    binner1       = ""
    binner2       = ""
    binner3       = ""

    publish_dir_mode = 'copy'

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

includeConfig 'config/base.config'
includeConfig 'config/codon.config'
includeConfig 'config/modules.config'

profiles {
    test {
        params {
            binner1 = "tests/resources/binner1"
            binner2 = "tests/resources/binner2"
            binner3 = "tests/resources/binner3"
            checkm_ref_db = "tests/resources/test.db"
            name = "test"
        }
    }

    lsf {
        workDir = params.workdir
        params.databases = params.dbs
        executor {
            name = "lsf"
            queueSize = 200
        }
        params.cloudProcess = true
        process.cache = "lenient"
    }

    slurm {
        workDir = params.workdir
        params.databases = params.dbs
        executor {
            name = "slurm"
            queueSize = 200
        }
        params.cloudProcess = true
        process.cache = "lenient"
    }

    local {
         docker {
            enabled = true
            autoMounts = true
            registry = 'quay.io'
            userEmulation = true
            runOptions = "--platform linux/x86_64"
        }
        executor {
            name = "local"
            cpus = 2
        }
        includeConfig 'config/local.config'
    }
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}